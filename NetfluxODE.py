# NetfluxODE.py 
# Automatically generated by Netflux on 11-Apr-2025 
import numpy as np 
def ODEfunc(t,y,tau,ymax,w,n,EC50): 

	rpar = np.array([w,n,EC50]) 
	PIK3CA = 0 
	ROS = 1 
	Rock2 = 2 
	KLF2 = 3 
	CCM3 = 4 
	MIF = 5 
	NFkB = 6 
	CCM1 = 7 
	MEKK3 = 8 
	MEK5 = 9 
	ERK5 = 10 
	NOTCH = 11 
	HEY1 = 12 
	HEY2 = 13 
	TSP1 = 14 
	Thbs1 = 15 
	TGFb = 16 
	LGALS3BP = 17 
	GAL3 = 18 
	GAL3ACT = 19 
	CCND1 = 20 
	MMP9 = 21 
	eNOS = 22 
	NO = 23 
	HIF1alpha = 24 
	Ang1 = 25 
	Tie2 = 26 
	PI3k = 27 
	Akt = 28 
	mTORC1 = 29 
	E4BP1 = 30 
	eIF4E = 31 
	glutamate = 32 
	GLAST = 33 
	GLT1 = 34 
	Cd74 = 35 
	MCP1 = 36 
	IL18 = 37 
	IL1B = 38 
	caspase1 = 39 
	NLRP3 = 40 
	COX2 = 41 
	VEGF = 42 
	GLEXC = 43 
	ANG = 44 
	INFL = 45 
	ASTRPROF = 46 
	HEM = 47 
	dydt = np.zeros(48) 
	dydt[PIK3CA] = (w[2]*ymax[PIK3CA] - y[PIK3CA])/tau[PIK3CA] 
	dydt[ROS] = (w[1]*ymax[ROS] - y[ROS])/tau[ROS] 
	dydt[Rock2] = (w[4]*ymax[Rock2] - y[Rock2])/tau[Rock2] 
	dydt[KLF2] = (w[0]*ymax[KLF2] - y[KLF2])/tau[KLF2] 
	dydt[CCM3] = (w[3]*ymax[CCM3] - y[CCM3])/tau[CCM3] 
	dydt[MIF] = (w[5]*ymax[MIF] - y[MIF])/tau[MIF] 
	dydt[NFkB] = (w[7]*ymax[NFkB] - y[NFkB])/tau[NFkB] 
	dydt[CCM1] = (w[6]*ymax[CCM1] - y[CCM1])/tau[CCM1] 
	dydt[MEKK3] = (act(y[CCM1],rpar[:,8])*ymax[MEKK3] - y[MEKK3])/tau[MEKK3] 
	dydt[MEK5] = (act(y[MEKK3],rpar[:,9])*ymax[MEK5] - y[MEK5])/tau[MEK5] 
	dydt[ERK5] = (act(y[MEK5],rpar[:,10])*ymax[ERK5] - y[ERK5])/tau[ERK5] 
	dydt[NOTCH] = (act(y[CCM1],rpar[:,12])*ymax[NOTCH] - y[NOTCH])/tau[NOTCH] 
	dydt[HEY1] = (act(y[NOTCH],rpar[:,13])*ymax[HEY1] - y[HEY1])/tau[HEY1] 
	dydt[HEY2] = (act(y[NOTCH],rpar[:,14])*ymax[HEY2] - y[HEY2])/tau[HEY2] 
	dydt[TSP1] = (act(y[Thbs1],rpar[:,23])*ymax[TSP1] - y[TSP1])/tau[TSP1] 
	dydt[Thbs1] = (act(y[KLF2],rpar[:,22])*ymax[Thbs1] - y[Thbs1])/tau[Thbs1] 
	dydt[TGFb] = (OR(act(y[ROS],rpar[:,25]),act(y[TSP1],rpar[:,26]))*ymax[TGFb] - y[TGFb])/tau[TGFb] 
	dydt[LGALS3BP] = (act(y[HIF1alpha],rpar[:,20])*ymax[LGALS3BP] - y[LGALS3BP])/tau[LGALS3BP] 
	dydt[GAL3] = (act(y[ROS],rpar[:,15])*ymax[GAL3] - y[GAL3])/tau[GAL3] 
	dydt[GAL3ACT] = (AND(w[16],[act(y[LGALS3BP],rpar[:,16]),act(y[GAL3],rpar[:,16])])*ymax[GAL3ACT] - y[GAL3ACT])/tau[GAL3ACT] 
	dydt[CCND1] = (act(y[GAL3ACT],rpar[:,17])*ymax[CCND1] - y[CCND1])/tau[CCND1] 
	dydt[MMP9] = (act(y[GAL3ACT],rpar[:,19])*ymax[MMP9] - y[MMP9])/tau[MMP9] 
	dydt[eNOS] = (OR(act(y[KLF2],rpar[:,27]),act(y[Akt],rpar[:,44]))*ymax[eNOS] - y[eNOS])/tau[eNOS] 
	dydt[NO] = (act(y[eNOS],rpar[:,28])*ymax[NO] - y[NO])/tau[NO] 
	dydt[HIF1alpha] = (OR(act(y[NO],rpar[:,29]),act(y[eIF4E],rpar[:,47]))*ymax[HIF1alpha] - y[HIF1alpha])/tau[HIF1alpha] 
	dydt[Ang1] = (inhib(y[CCM3],rpar[:,41])*ymax[Ang1] - y[Ang1])/tau[Ang1] 
	dydt[Tie2] = (act(y[Ang1],rpar[:,42])*ymax[Tie2] - y[Tie2])/tau[Tie2] 
	dydt[PI3k] = (OR(act(y[LGALS3BP],rpar[:,21]),OR(act(y[PIK3CA],rpar[:,37]),act(y[Tie2],rpar[:,43])))*ymax[PI3k] - y[PI3k])/tau[PI3k] 
	dydt[Akt] = (act(y[PI3k],rpar[:,38])*ymax[Akt] - y[Akt])/tau[Akt] 
	dydt[mTORC1] = (act(y[Akt],rpar[:,39])*ymax[mTORC1] - y[mTORC1])/tau[mTORC1] 
	dydt[E4BP1] = (act(y[mTORC1],rpar[:,45])*ymax[E4BP1] - y[E4BP1])/tau[E4BP1] 
	dydt[eIF4E] = (act(y[E4BP1],rpar[:,46])*ymax[eIF4E] - y[eIF4E])/tau[eIF4E] 
	dydt[glutamate] = (OR(act(y[GLT1],rpar[:,35]),act(y[GLAST],rpar[:,36]))*ymax[glutamate] - y[glutamate])/tau[glutamate] 
	dydt[GLAST] = (act(y[Rock2],rpar[:,33])*ymax[GLAST] - y[GLAST])/tau[GLAST] 
	dydt[GLT1] = (OR(act(y[Rock2],rpar[:,34]),act(y[mTORC1],rpar[:,40]))*ymax[GLT1] - y[GLT1])/tau[GLT1] 
	dydt[Cd74] = (act(y[MIF],rpar[:,56])*ymax[Cd74] - y[Cd74])/tau[Cd74] 
	dydt[MCP1] = (OR(act(y[IL1B],rpar[:,54]),act(y[HIF1alpha],rpar[:,55]))*ymax[MCP1] - y[MCP1])/tau[MCP1] 
	dydt[IL18] = (act(y[caspase1],rpar[:,50])*ymax[IL18] - y[IL18])/tau[IL18] 
	dydt[IL1B] = (OR(act(y[ROS],rpar[:,30]),OR(act(y[caspase1],rpar[:,51]),act(y[NLRP3],rpar[:,53])))*ymax[IL1B] - y[IL1B])/tau[IL1B] 
	dydt[caspase1] = (act(y[NLRP3],rpar[:,32])*ymax[caspase1] - y[caspase1])/tau[caspase1] 
	dydt[NLRP3] = (OR(act(y[ROS],rpar[:,31]),act(y[NFkB],rpar[:,52]))*ymax[NLRP3] - y[NLRP3])/tau[NLRP3] 
	dydt[COX2] = (OR(act(y[HIF1alpha],rpar[:,48]),act(y[Cd74],rpar[:,57]))*ymax[COX2] - y[COX2])/tau[COX2] 
	dydt[VEGF] = (OR(act(y[ERK5],rpar[:,11]),OR(act(y[GAL3ACT],rpar[:,18]),OR(act(y[TSP1],rpar[:,24]),act(y[HIF1alpha],rpar[:,49]))))*ymax[VEGF] - y[VEGF])/tau[VEGF] 
	dydt[GLEXC] = (act(y[glutamate],rpar[:,64])*ymax[GLEXC] - y[GLEXC])/tau[GLEXC] 
	dydt[ANG] = (OR(act(y[COX2],rpar[:,59]),OR(act(y[VEGF],rpar[:,60]),OR(act(y[HEY1],rpar[:,65]),act(y[HEY2],rpar[:,66]))))*ymax[ANG] - y[ANG])/tau[ANG] 
	dydt[INFL] = (OR(act(y[COX2],rpar[:,58]),OR(act(y[IL1B],rpar[:,61]),OR(act(y[IL18],rpar[:,62]),act(y[MCP1],rpar[:,63]))))*ymax[INFL] - y[INFL])/tau[INFL] 
	dydt[ASTRPROF] = (act(y[CCND1],rpar[:,67])*ymax[ASTRPROF] - y[ASTRPROF])/tau[ASTRPROF] 
	dydt[HEM] = (act(y[MMP9],rpar[:,68])*ymax[HEM] - y[HEM])/tau[HEM] 
	return dydt 

# utility functions
 
def act(x, rpar): 
	# Extract parameters from rpar 
	w = rpar[0] 
	n = rpar[1] 
	EC50 = rpar[2]
 
	# hill activation function with parameters w (weight), n (Hill coeff), EC50 
	beta = ((EC50**n)-1)/(2*EC50**n-1) 
	K = (beta-1)**(1/n) 
	fact = w*(beta*x**n)/(K**n+x**n) 
	if fact > w: 
		fact = w 
	return fact
 
def inhib(x, rpar): 
	# Extract parameters from rpar 
	w = rpar[0] 
	# inverse hill function with parameters w (weight), n (Hill coeff), EC50 
	finhib = w - act(x, rpar) 
	return finhib
 
def OR(x, y): 
	# OR logic gate 
	z = x + y - x*y 
	return z
 
def AND(w, reactList): 
	# AND logic gate, multiplying all of the reactants together 
	if w == 0: 
		z = 0 
	else: 
		p = np.array(reactList).prod() 
		z = p/w**(len(reactList)-2) 
	return z
 
